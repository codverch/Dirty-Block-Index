////////////////////////////////////////////////////////////////////
//
// Trap instructions
//

output header {{
        /**
         * Base class for integer operations.
         */
        class Trap : public SparcStaticInst
        {
          protected:

            // Constructor
            Trap(const char *mnem, MachInst _machInst, OpClass __opClass) :
                SparcStaticInst(mnem, _machInst, __opClass)
            {
            }

            std::string generateDisassembly(Addr pc,
                    const SymbolTable *symtab) const;
        };
}};

output decoder {{
        std::string Trap::generateDisassembly(Addr pc,
                const SymbolTable *symtab) const
        {
            return "Trap instruction\n";
        }
}};

def template TrapExecute {{
        Fault %(class_name)s::execute(%(CPU_exec_context)s *xc,
                Trace::InstRecord *traceData) const
        {
            //TODO: set up a software fault and return it.
            return NoFault;
        }
}};

// Primary format for integer operate instructions:
def format Trap(code, *opt_flags) {{
        orig_code = code
        cblk = CodeBlock(code)
        iop = InstObjParams(name, Name, 'SparcStaticInst', cblk, opt_flags)
        header_output = BasicDeclare.subst(iop)
        decoder_output = BasicConstructor.subst(iop)
        decode_block = BasicDecodeWithMnemonic.subst(iop)
        exec_output = TrapExecute.subst(iop)
}};
