////////////////////////////////////////////////////////////////////
//
// Integer operate instructions
//

output header {{
        /**
         * Base class for integer operations.
         */
        class IntOp : public MipsStaticInst
        {
                protected:

                /// Constructor
                IntegerOp(const char *mnem, MachInst _machInst, OpClass __opClass) : MipsStaticInst(mnem, _machInst, __opClass)
                {
                }

                std::string generateDisassembly(Addr pc, const SymbolTable *symtab) const;
        };

}};

output decoder {{
        std::string IntOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const
        {
                return "Disassembly of integer instruction\n";
        }

        std::string IntImmOp::generateDisassembly(Addr pc, const SymbolTable *symtab) const
        {
                return "Disassembly of integer immediate instruction\n";
        }
}};

def template IntExecute {{
        Fault %(class_name)s::execute(%(CPU_exec_context)s *xc, Trace::InstRecord *traceData) const
        {
                //Attempt to execute the instruction
                try
                {
                        %(op_decl)s;
                        %(op_rd)s;
                        %(code)s;
                }
                //If we have an exception for some reason,
                //deal with it
                catch(MipsException except)
                {
                        //Deal with exception
                        return No_Fault;
                }

                //Write the resulting state to the execution context
                %(op_wb)s;

                return No_Fault;
        }
}};

// Primary format for integer operate instructions:
def format IntOp(code, *opt_flags) {{
        orig_code = code
        cblk = CodeBlock(code)
        iop = InstObjParams(name, Name, 'MipsStaticInst', cblk, opt_flags)
        header_output = BasicDeclare.subst(iop)
        decoder_output = BasicConstructor.subst(iop)
        decode_block = BasicDecodeWithMnemonic.subst(iop)
        exec_output = IntegerExecute.subst(iop)
}};

