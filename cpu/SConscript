# -*- mode:python -*-

# Copyright (c) 2006 The Regents of The University of Michigan
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import os.path

# Import build environment variable from SConstruct.
Import('env')

models_db = File('cpu_models.py')
execfile(models_db.srcnode().abspath)

exec_sig_template = '''
virtual Fault execute(%s *xc, Trace::InstRecord *traceData) const = 0;
'''

def gen_cpu_exec_signatures(target, source, env):
    f = open(str(target[0]), 'w')
    print >> f, '''
#ifndef __CPU_STATIC_INST_EXEC_SIGS_HH__
#define __CPU_STATIC_INST_EXEC_SIGS_HH__
'''
    for cpu in env['CPU_MODELS']:
        xc_type = CpuModel.dict[cpu].strings['CPU_exec_context']
        print >> f, exec_sig_template % xc_type
    print >> f, '''
#endif  // __CPU_STATIC_INST_EXEC_SIGS_HH__
'''

env.Command('static_inst_exec_sigs.hh', models_db, gen_cpu_exec_signatures)

sources = []

if 'SimpleCPU' in env['CPU_MODELS']:
    sources += Split('simple/cpu.cc')

if 'FastCPU' in env['CPU_MODELS']:
    sources += Split('fast/cpu.cc')

if 'AlphaFullCPU' in env['CPU_MODELS']:
    sources += Split('''
        o3/2bit_local_pred.cc
        o3/alpha_dyn_inst.cc
        o3/alpha_cpu.cc
        o3/alpha_cpu_builder.cc
        o3/bpred_unit.cc
        o3/btb.cc
        o3/commit.cc
        o3/decode.cc
        o3/fetch.cc
        o3/free_list.cc
        o3/cpu.cc
        o3/iew.cc
        o3/inst_queue.cc
        o3/ldstq.cc
        o3/mem_dep_unit.cc
        o3/ras.cc
        o3/rename.cc
        o3/rename_map.cc
        o3/rob.cc
        o3/sat_counter.cc
        o3/store_set.cc
        o3/tournament_pred.cc
        ''')

# FullCPU sources are included from m5/SConscript since they're not
# below this point in the file hierarchy.

# Convert file names to SCons File objects.  This takes care of the
# path relative to the top of the directory tree.
sources = [File(s) for s in sources]

Return('sources')

