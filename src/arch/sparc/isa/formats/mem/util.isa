// Copyright (c) 2006 The Regents of The University of Michigan
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Ali Saidi
//          Gabe Black
//          Steve Reinhardt

////////////////////////////////////////////////////////////////////
//
// Mem utility templates and functions
//

//This template provides the execute functions for a load
def template LoadExecute {{
        Fault %(class_name)s::execute(%(CPU_exec_context)s *xc,
                Trace::InstRecord *traceData) const
        {
            Fault fault = NoFault;
            Addr EA;
            %(op_decl)s;
            %(op_rd)s;
            %(priv_check)s;
            %(ea_code)s;
            DPRINTF(Sparc, "The address is 0x%x\n", EA);
            fault = xc->read(EA, (uint%(mem_acc_size)s_t&)Mem, 0);
            %(code)s;
            if(fault == NoFault)
            {
                //Write the resulting state to the execution context
                %(op_wb)s;
            }

            return fault;
        }

        Fault %(class_name)s::initiateAcc(%(CPU_exec_context)s * xc,
                Trace::InstRecord * traceData) const
        {
            Fault fault = NoFault;
            Addr EA;
            uint%(mem_acc_size)s_t Mem;
            %(ea_decl)s;
            %(ea_rd)s;
            %(priv_check)s;
            %(ea_code)s;
            fault = xc->read(EA, (uint%(mem_acc_size)s_t&)Mem, 0);
            return fault;
        }

        Fault %(class_name)s::completeAcc(PacketPtr pkt, %(CPU_exec_context)s * xc,
                Trace::InstRecord * traceData) const
        {
            Fault fault = NoFault;
            %(code_decl)s;
            %(code_rd)s;
            Mem = pkt->get<typeof(Mem)>();
            %(code)s;
            if(fault == NoFault)
            {
                %(code_wb)s;
            }
            return fault;
        }
}};

//This template provides the execute functions for a store
def template StoreExecute {{
        Fault %(class_name)s::execute(%(CPU_exec_context)s *xc,
                Trace::InstRecord *traceData) const
        {
            Fault fault = NoFault;
            uint64_t write_result = 0;
            Addr EA;
            %(op_decl)s;
            %(op_rd)s;
            %(priv_check)s;
            %(ea_code)s;
            DPRINTF(Sparc, "The address is 0x%x\n", EA);
            %(code)s;

            if(fault == NoFault)
            {
                fault = xc->write((uint%(mem_acc_size)s_t)Mem, EA, 0, &write_result);
            }
            if(fault == NoFault)
            {
                //Write the resulting state to the execution context
                %(op_wb)s;
            }

            return fault;
        }

        Fault %(class_name)s::initiateAcc(%(CPU_exec_context)s * xc,
                Trace::InstRecord * traceData) const
        {
            Fault fault = NoFault;
            uint64_t write_result = 0;
            Addr EA;
            %(op_decl)s;
            %(op_rd)s;
            %(priv_check)s;
            %(ea_code)s;
            DPRINTF(Sparc, "The address is 0x%x\n", EA);
            %(code)s;
            if(fault == NoFault)
            {
                fault = xc->write((uint%(mem_acc_size)s_t)Mem, EA, 0, &write_result);
            }
            if(fault == NoFault)
            {
                //Write the resulting state to the execution context
                %(op_wb)s;
            }
            return fault;
        }

        Fault %(class_name)s::completeAcc(PacketPtr, %(CPU_exec_context)s * xc,
                Trace::InstRecord * traceData) const
        {
            return NoFault;
        }
}};

//This delcares the initiateAcc function in memory operations
def template InitiateAccDeclare {{
    Fault initiateAcc(%(CPU_exec_context)s *, Trace::InstRecord *) const;
}};

//This declares the completeAcc function in memory operations
def template CompleteAccDeclare {{
    Fault completeAcc(PacketPtr, %(CPU_exec_context)s *, Trace::InstRecord *) const;
}};

//This function properly generates the execute functions for one of the
//templates above. This is needed because in one case, ea computation,
//privelege checks and the actual code all occur in the same function,
//and in the other they're distributed across two. Also note that for
//execute functions, the name of the base class doesn't matter.
let {{
    def doSplitExecute(code, eaRegCode, eaImmCode, execute,
            priv, nameReg, nameImm, NameReg, NameImm, opt_flags):
        codeIop = InstObjParams(nameReg, NameReg, '', code, opt_flags)
        executeCode = ''
        for (eaCode, name, Name) in (
                (eaRegCode, nameReg, NameReg),
                (eaImmCode, nameImm, NameImm)):
            eaIop = InstObjParams(name, Name, '', eaCode,
                    opt_flags, {"priv_check": priv})
            iop = InstObjParams(name, Name, '', code, opt_flags,
                    {"priv_check": priv, "ea_code" : eaCode})
            (iop.ea_decl,
             iop.ea_rd,
             iop.ea_wb) = (eaIop.op_decl, eaIop.op_rd, eaIop.op_wb)
            (iop.code_decl,
             iop.code_rd,
             iop.code_wb) = (codeIop.op_decl, codeIop.op_rd, codeIop.op_wb)
            executeCode += execute.subst(iop)
        return executeCode
}};
