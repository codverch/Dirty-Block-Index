# -*- mode:python -*-

# Copyright (c) 2006 The Regents of The University of Michigan
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Steve Reinhardt

import os.path

# Import build environment variable from SConstruct.
Import('env')

# Right now there are no source files immediately in this directory
sources = []

#################################################################
#
# ISA "switch header" generation.
#
# Auto-generate arch headers that include the right ISA-specific
# header based on the setting of THE_ISA preprocessor variable.
#
#################################################################

# List of headers to generate
isa_switch_hdrs = Split('''
	arguments.hh
	constants.hh
	faults.hh
	isa_traits.hh
	process.hh
	regfile.hh
	stacktrace.hh
	tlb.hh
	types.hh
	utility.hh
	vtophys.hh
        ''')

# Generate the header.  target[0] is the full path of the output
# header to generate.  'source' is a dummy variable, since we get the
# list of ISAs from env['ALL_ISA_LIST'].
def gen_switch_hdr(target, source, env):
    fname = str(target[0])
    basename = os.path.basename(fname)
    f = open(fname, 'w')
    f.write('#include "arch/isa_specific.hh"\n')
    cond = '#if'
    for isa in env['ALL_ISA_LIST']:
        f.write('%s THE_ISA == %s_ISA\n#include "arch/%s/%s"\n'
                % (cond, isa.upper(), isa, basename))
        cond = '#elif'
    f.write('#else\n#error "THE_ISA not set"\n#endif\n')
    f.close()
    return 0

# String to print when generating header
def gen_switch_hdr_string(target, source, env):
    return "Generating ISA switch header " + str(target[0])

# Build SCons Action object. 'varlist' specifies env vars that this
# action depends on; when env['ALL_ISA_LIST'] changes these actions
# should get re-executed.
switch_hdr_action = Action(gen_switch_hdr, gen_switch_hdr_string,
                           varlist=['ALL_ISA_LIST'])

# Instantiate actions for each header
for hdr in isa_switch_hdrs:
    env.Command(hdr, [], switch_hdr_action)

#################################################################
#
# Include architecture-specific files.
#
#################################################################

#
# Build a SCons scanner for ISA files
#
import SCons.Scanner

isa_scanner = SCons.Scanner.Classic("ISAScan",
                                    [".isa", ".ISA"],
                                    "SRCDIR",
                                    r'^\s*##include\s+"([\w/.-]*)"')

env.Append(SCANNERS = isa_scanner)

#
# Now create a Builder object that uses isa_parser.py to generate C++
# output from the ISA description (*.isa) files.
#

# Convert to File node to fix path
isa_parser = File('isa_parser.py')
cpu_models_file = File('../cpu/cpu_models.py')

# This sucks in the defintions of the CpuModel objects.
execfile(cpu_models_file.srcnode().abspath)

# Several files are generated from the ISA description.
# We always get the basic decoder and header file.
isa_desc_gen_files = Split('decoder.cc decoder.hh')
# We also get an execute file for each selected CPU model.
isa_desc_gen_files += [CpuModel.dict[cpu].filename
                       for cpu in env['CPU_MODELS']]

# The emitter patches up the sources & targets to include the
# autogenerated files as targets and isa parser itself as a source.
def isa_desc_emitter(target, source, env):
    return (isa_desc_gen_files, [isa_parser, cpu_models_file] + source)

# Pieces are in place, so create the builder.
isa_desc_builder = Builder(action='python2.4 $SOURCES $TARGET.dir $CPU_MODELS',
                           emitter = isa_desc_emitter)

env.Append(BUILDERS = { 'ISADesc' : isa_desc_builder })

#
# Now include other ISA-specific sources from the ISA subdirectories.
#

isa = env['TARGET_ISA'] # someday this may be a list of ISAs

# Let the target architecture define what additional sources it needs
sources += SConscript(os.path.join(isa, 'SConscript'), exports = 'env')

Return('sources')
