// -*- mode:c++ -*-

////////////////////////////////////////////////////////////////////
//
// Trap instructions
//

output header {{
        /**
         * Base class for integer operations.
         */
        class Trap : public MipsStaticInst
        {
                protected:

                /// Constructor
                Trap(const char *mnem, MachInst _machInst, OpClass __opClass) : MipsStaticInst(mnem, _machInst, __opClass)
                {
                }

                std::string generateDisassembly(Addr pc, const SymbolTable *symtab) const;
        };
}};

output decoder {{
        std::string Trap::generateDisassembly(Addr pc, const SymbolTable *symtab) const
        {
                return "Disassembly of trap instruction\n";
        }
}};

def template TrapExecute {{
        //Edit This Template When Traps Are Implemented
        Fault %(class_name)s::execute(%(CPU_exec_context)s *xc, Trace::InstRecord *traceData) const
        {
                //Write the resulting state to the execution context
                %(op_wb)s;

                //Call into the trap handler with the appropriate fault
                return No_Fault;
        }
}};

def format Trap(code, *flags) {{
        code = 'panic(\"'
        code += 'Trap Exception Handler Is Currently Not Implemented.'
        code += '\");'
        iop = InstObjParams(name, Name, 'MipsStaticInst', CodeBlock(code), flags)
        header_output = BasicDeclare.subst(iop)
        decoder_output = BasicConstructor.subst(iop)
        decode_block = BasicDecode.subst(iop)
        exec_output = BasicExecute.subst(iop)
}};
