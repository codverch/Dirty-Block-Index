// Copyright (c) 2007 The Hewlett-Packard Development Company
// All rights reserved.
//
// Redistribution and use of this software in source and binary forms,
// with or without modification, are permitted provided that the
// following conditions are met:
//
// The software must be used only for Non-Commercial Use which means any
// use which is NOT directed to receiving any direct monetary
// compensation for, or commercial advantage from such use.  Illustrative
// examples of non-commercial use are academic research, personal study,
// teaching, education and corporate research & development.
// Illustrative examples of commercial use are distributing products for
// commercial advantage and providing services using the software for
// commercial advantage.
//
// If you wish to use this software or functionality therein that may be
// covered by patents for commercial use, please contact:
//     Director of Intellectual Property Licensing
//     Office of Strategy and Technology
//     Hewlett-Packard Company
//     1501 Page Mill Road
//     Palo Alto, California  94304
//
// Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.  Redistributions
// in binary form must reproduce the above copyright notice, this list of
// conditions and the following disclaimer in the documentation and/or
// other materials provided with the distribution.  Neither the name of
// the COPYRIGHT HOLDER(s), HEWLETT-PACKARD COMPANY, nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.  No right of
// sublicense is granted herewith.  Derivatives of the software and
// output created using the software may be prepared, but only for
// Non-Commercial Uses.  Derivatives of the software may be shared with
// others provided: (i) the others agree to abide by the list of
// conditions herein which includes the Non-Commercial Use restrictions;
// and (ii) such Derivatives of the software include the above copyright
// notice to acknowledge the contribution from this software where
// applicable, this list of conditions and the disclaimer below.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Gabe Black

//////////////////////////////////////////////////////////////////////////
//
// RegOp Microop templates
//
//////////////////////////////////////////////////////////////////////////

def template MicroRegOpExecute {{
        Fault %(class_name)s::execute(%(CPU_exec_context)s *xc,
                Trace::InstRecord *traceData) const
        {
            Fault fault = NoFault;

            DPRINTF(X86, "The data size is %d\n", dataSize);
            %(op_decl)s;
            %(op_rd)s;

            if(%(cond_check)s)
            {
                %(code)s;
                %(flag_code)s;
            }
            else
            {
                %(else_code)s;
            }

            //Write the resulting state to the execution context
            if(fault == NoFault)
            {
                %(op_wb)s;
            }
            return fault;
        }
}};

def template MicroRegOpImmExecute {{
        Fault %(class_name)s::execute(%(CPU_exec_context)s *xc,
                Trace::InstRecord *traceData) const
        {
            Fault fault = NoFault;

            %(op_decl)s;
            %(op_rd)s;

            if(%(cond_check)s)
            {
                %(code)s;
                %(flag_code)s;
            }
            else
            {
                %(else_code)s;
            }

            //Write the resulting state to the execution context
            if(fault == NoFault)
            {
                %(op_wb)s;
            }
            return fault;
        }
}};

def template MicroRegOpDeclare {{
    class %(class_name)s : public %(base_class)s
    {
      protected:
        void buildMe();

      public:
        %(class_name)s(ExtMachInst _machInst,
                const char * instMnem,
                bool isMicro, bool isDelayed, bool isFirst, bool isLast,
                RegIndex _src1, RegIndex _src2, RegIndex _dest,
                uint8_t _dataSize, uint16_t _ext);

        %(class_name)s(ExtMachInst _machInst,
                const char * instMnem,
                RegIndex _src1, RegIndex _src2, RegIndex _dest,
                uint8_t _dataSize, uint16_t _ext);

        %(BasicExecDeclare)s
    };
}};

def template MicroRegOpImmDeclare {{

    class %(class_name)s : public %(base_class)s
    {
      protected:
        void buildMe();

      public:
        %(class_name)s(ExtMachInst _machInst,
                const char * instMnem,
                bool isMicro, bool isDelayed, bool isFirst, bool isLast,
                RegIndex _src1, uint16_t _imm8, RegIndex _dest,
                uint8_t _dataSize, uint16_t _ext);

        %(class_name)s(ExtMachInst _machInst,
                const char * instMnem,
                RegIndex _src1, uint16_t _imm8, RegIndex _dest,
                uint8_t _dataSize, uint16_t _ext);

        %(BasicExecDeclare)s
    };
}};

def template MicroRegOpConstructor {{

    inline void %(class_name)s::buildMe()
    {
        %(constructor)s;
    }

    inline %(class_name)s::%(class_name)s(
            ExtMachInst machInst, const char * instMnem,
            RegIndex _src1, RegIndex _src2, RegIndex _dest,
            uint8_t _dataSize, uint16_t _ext) :
        %(base_class)s(machInst, "%(mnemonic)s", instMnem,
                false, false, false, false,
                _src1, _src2, _dest, _dataSize, _ext,
                %(op_class)s)
    {
        buildMe();
    }

    inline %(class_name)s::%(class_name)s(
            ExtMachInst machInst, const char * instMnem,
            bool isMicro, bool isDelayed, bool isFirst, bool isLast,
            RegIndex _src1, RegIndex _src2, RegIndex _dest,
            uint8_t _dataSize, uint16_t _ext) :
        %(base_class)s(machInst, "%(mnemonic)s", instMnem,
                isMicro, isDelayed, isFirst, isLast,
                _src1, _src2, _dest, _dataSize, _ext,
                %(op_class)s)
    {
        buildMe();
    }
}};

def template MicroRegOpImmConstructor {{

    inline void %(class_name)s::buildMe()
    {
        %(constructor)s;
    }

    inline %(class_name)s::%(class_name)s(
            ExtMachInst machInst, const char * instMnem,
            RegIndex _src1, uint16_t _imm8, RegIndex _dest,
            uint8_t _dataSize, uint16_t _ext) :
        %(base_class)s(machInst, "%(mnemonic)s", instMnem,
                false, false, false, false,
                _src1, _imm8, _dest, _dataSize, _ext,
                %(op_class)s)
    {
        buildMe();
    }

    inline %(class_name)s::%(class_name)s(
            ExtMachInst machInst, const char * instMnem,
            bool isMicro, bool isDelayed, bool isFirst, bool isLast,
            RegIndex _src1, uint16_t _imm8, RegIndex _dest,
            uint8_t _dataSize, uint16_t _ext) :
        %(base_class)s(machInst, "%(mnemonic)s", instMnem,
                isMicro, isDelayed, isFirst, isLast,
                _src1, _imm8, _dest, _dataSize, _ext,
                %(op_class)s)
    {
        buildMe();
    }
}};

let {{
    class X86MicroMeta(type):
        def __new__(mcls, name, bases, dict):
            abstract = False
            if "abstract" in dict:
                abstract = dict['abstract']
                del dict['abstract']

            cls = type.__new__(mcls, name, bases, dict)
            if not abstract:
                allClasses[name] = cls
            return cls

    class XXX86Microop(object):
        __metaclass__ = X86MicroMeta
        abstract = True

    class RegOp(X86Microop):
        abstract = True
        def __init__(self, dest, src1, src2, flags, dataSize):
            self.dest = dest
            self.src1 = src1
            self.src2 = src2
            self.flags = flags
            self.dataSize = dataSize
            if flags is None:
                self.ext = 0
            else:
                if not isinstance(flags, (list, tuple)):
                    raise Exception, "flags must be a list or tuple of flags"
                self.ext = " | ".join(flags)
                self.className += "Flags"

        def getAllocator(self, *microFlags):
            allocator = '''new %(class_name)s(machInst, mnemonic
                    %(flags)s, %(src1)s, %(src2)s, %(dest)s,
                    %(dataSize)s, %(ext)s)''' % {
                "class_name" : self.className,
                "flags" : self.microFlagsText(microFlags),
                "src1" : self.src1, "src2" : self.src2,
                "dest" : self.dest,
                "dataSize" : self.dataSize,
                "ext" : self.ext}
            return allocator

    class RegOpImm(X86Microop):
        abstract = True
        def __init__(self, dest, src1, imm8, flags, dataSize):
            self.dest = dest
            self.src1 = src1
            self.imm8 = imm8
            self.flags = flags
            self.dataSize = dataSize
            if flags is None:
                self.ext = 0
            else:
                if not isinstance(flags, (list, tuple)):
                    raise Exception, "flags must be a list or tuple of flags"
                self.ext = " | ".join(flags)
                self.className += "Flags"

        def getAllocator(self, *microFlags):
            allocator = '''new %(class_name)s(machInst, mnemonic
                    %(flags)s, %(src1)s, %(imm8)s, %(dest)s,
                    %(dataSize)s, %(ext)s)''' % {
                "class_name" : self.className,
                "flags" : self.microFlagsText(microFlags),
                "src1" : self.src1, "imm8" : self.imm8,
                "dest" : self.dest,
                "dataSize" : self.dataSize,
                "ext" : self.ext}
            return allocator
}};

let {{

    # Make these empty strings so that concatenating onto
    # them will always work.
    header_output = ""
    decoder_output = ""
    exec_output = ""

    # A function which builds the C++ classes that implement the microops
    def setUpMicroRegOp(name, Name, base, code, flagCode = "", condCheck = "true", elseCode = ";", imm=False):
        global header_output
        global decoder_output
        global exec_output
        global microopClasses

        iop = InstObjParams(name, Name, base,
                {"code" : code,
                 "flag_code" : flagCode,
                 "cond_check" : condCheck,
                 "else_code" : elseCode})
        if imm:
            header_output += MicroRegOpImmDeclare.subst(iop)
            decoder_output += MicroRegOpImmConstructor.subst(iop)
            exec_output += MicroRegOpImmExecute.subst(iop)
        else:
            header_output += MicroRegOpDeclare.subst(iop)
            decoder_output += MicroRegOpConstructor.subst(iop)
            exec_output += MicroRegOpExecute.subst(iop)


    checkCCFlagBits = "checkCondition(ccFlagBits)"
    genCCFlagBits = \
        "ccFlagBits = genFlags(ccFlagBits, ext, DestReg, psrc1, op2);"
    genCCFlagBitsSub = \
        "ccFlagBits = genFlags(ccFlagBits, ext, DestReg, psrc1, ~op2, true);"
    genCCFlagBitsLogic = '''
        //Don't have genFlags handle the OF or CF bits
        uint64_t mask = CFBit | OFBit;
        ccFlagBits = genFlags(ccFlagBits, ext & ~mask, DestReg, psrc1, op2);
        //If a logic microop wants to set these, it wants to set them to 0.
        ccFlagBits &= ~(CFBit & ext);
        ccFlagBits &= ~(OFBit & ext);
    '''

    regPick = '''
        IntReg psrc1 = pick(SrcReg1, 0, dataSize);
        IntReg psrc2 = pick(SrcReg2, 1, dataSize);
    '''
    immPick = '''
        IntReg psrc1 = pick(SrcReg1, 0, dataSize);
    '''


    # This creates a python representations of a microop which are a cross
    # product of reg/immediate and flag/no flag versions.
    def defineMicroRegOp(mnemonic, code, flagCode=genCCFlagBits, \
            cc=False, elseCode=";"):
        Name = mnemonic
        name = mnemonic.lower()

        # Find op2 in each of the instruction definitions. Create two versions
        # of the code, one with an integer operand, and one with an immediate
        # operand.
        matcher = re.compile("op2(?P<typeQual>\\.\\w+)?")
        regCode = regPick + matcher.sub("psrc2", code)
        immCode = immPick + matcher.sub("imm8", code)

        if not cc:
            condCode = "true"
        else:
            flagCode = ""
            condCode = checkCCFlagBits

        regFlagCode = matcher.sub("psrc2", flagCode)
        immFlagCode = matcher.sub("imm8", flagCode)

        class RegOpChild(RegOp):
            mnemonic = name
            className = Name
            def __init__(self, dest, src1, src2, \
                    flags=None, dataSize="env.dataSize"):
                super(RegOpChild, self).__init__(dest, src1, src2, \
                        flags, dataSize)

        microopClasses[name] = RegOpChild

        setUpMicroRegOp(name, Name, "X86ISA::RegOp", regCode);
        setUpMicroRegOp(name, Name + "Flags", "X86ISA::RegOp",
                regCode, flagCode=regFlagCode,
                condCheck=condCode, elseCode=elseCode);

        class RegOpChildImm(RegOpImm):
            mnemonic = name + 'i'
            className = Name + 'Imm'
            def __init__(self, dest, src1, src2, \
                    flags=None, dataSize="env.dataSize"):
                super(RegOpChildImm, self).__init__(dest, src1, src2, \
                        flags, dataSize)

        microopClasses[name + 'i'] = RegOpChildImm

        setUpMicroRegOp(name + "i", Name + "Imm", "X86ISA::RegOpImm", \
                immCode, imm=True);
        setUpMicroRegOp(name + "i", Name + "ImmFlags", "X86ISA::RegOpImm",
                immCode, flagCode=immFlagCode,
                condCheck=condCode, elseCode=elseCode, imm=True);

    # This has it's own function because Wr ops have implicit destinations
    def defineMicroRegOpWr(mnemonic, code, elseCode=";"):
        Name = mnemonic
        name = mnemonic.lower()

        # Find op2 in each of the instruction definitions. Create two versions
        # of the code, one with an integer operand, and one with an immediate
        # operand.
        matcher = re.compile("op2(?P<typeQual>\\.\\w+)?")
        regCode = regPick + matcher.sub("psrc2", code)
        immCode = immPick + matcher.sub("imm8", code)

        class RegOpChild(RegOp):
            mnemonic = name
            className = Name
            def __init__(self, src1, src2, flags=None, dataSize="env.dataSize"):
                super(RegOpChild, self).__init__("NUM_INTREGS", src1, src2, flags, dataSize)

        microopClasses[name] = RegOpChild

        setUpMicroRegOp(name, Name, "X86ISA::RegOp", regCode);
        setUpMicroRegOp(name, Name + "Flags", "X86ISA::RegOp", regCode,
                condCheck = checkCCFlagBits, elseCode = elseCode);

        class RegOpChildImm(RegOpImm):
            mnemonic = name + 'i'
            className = Name + 'Imm'
            def __init__(self, src1, src2, flags=None, dataSize="env.dataSize"):
                super(RegOpChildImm, self).__init__("NUM_INTREGS", src1, src2, flags, dataSize)

        microopClasses[name + 'i'] = RegOpChildImm

        setUpMicroRegOp(name + 'i', Name + "Imm", "X86ISA::RegOpImm", \
                immCode, imm=True);
        setUpMicroRegOp(name + 'i', Name + "ImmFlags", "X86ISA::RegOpImm", \
                immCode, condCheck = checkCCFlagBits, elseCode = elseCode, \
                imm=True);

    # This has it's own function because Rd ops don't always have two parameters
    def defineMicroRegOpRd(mnemonic, code):
        Name = mnemonic
        name = mnemonic.lower()

        class RegOpChild(RegOp):
            className = Name
            mnemonic = name
            def __init__(self, dest, src1 = "NUM_INTREGS", dataSize="env.dataSize"):
                super(RegOpChild, self).__init__(dest, src1, "NUM_INTREGS", None, dataSize)

        microopClasses[name] = RegOpChild

        setUpMicroRegOp(name, Name, "X86ISA::RegOp", code);

    def defineMicroRegOpImm(mnemonic, code, flagCode=""):
        Name = mnemonic
        name = mnemonic.lower()
        code = immPick + code

        class RegOpChild(RegOpImm):
            className = Name
            mnemonic = name
            def __init__(self, dest, src1, src2, \
                    flags=None, dataSize="env.dataSize"):
                super(RegOpChild, self).__init__(dest, \
                        src1, src2, flags, dataSize)

        microopClasses[name] = RegOpChild

        setUpMicroRegOp(name, Name, "X86ISA::RegOpImm", code, imm=True);
        setUpMicroRegOp(name, Name + "Flags", "X86ISA::RegOpImm", \
                code, flagCode=flagCode, imm=True);

    def defineMicroRegOpRdImm(mnemonic, code, flagCode=""):
        Name = mnemonic
        name = mnemonic.lower()
        code = immPick + code

        class RegOpChildRdImm(RegOpImm):
            className = Name
            mnemonic = name
            def __init__(self, dest, imm, flags=None, \
                    dataSize="env.dataSize"):
                super(RegOpChildRdImm, self).__init__(dest, \
                        "NUM_INTREGS", imm, flags, dataSize)

        microopClasses[name] = RegOpChildRdImm

        setUpMicroRegOp(name, Name, "X86ISA::RegOpImm", code, imm=True);
        setUpMicroRegOp(name, Name + "Flags", "X86ISA::RegOpImm", \
                code, flagCode=flagCode, imm=True);

    defineMicroRegOp('Add', 'DestReg = merge(DestReg, psrc1 + op2, dataSize)')
    defineMicroRegOp('Or', 'DestReg = merge(DestReg, psrc1 | op2, dataSize);',
            flagCode = genCCFlagBitsLogic)
    defineMicroRegOp('Adc', '''
            CCFlagBits flags = ccFlagBits;
            DestReg = merge(DestReg, psrc1 + op2 + flags.CF, dataSize);
            ''')
    defineMicroRegOp('Sbb', '''
            CCFlagBits flags = ccFlagBits;
            DestReg = merge(DestReg, psrc1 - op2 - flags.CF, dataSize);
            ''', flagCode = genCCFlagBitsSub)
    defineMicroRegOp('And', \
            'DestReg = merge(DestReg, psrc1 & op2, dataSize)', \
            flagCode = genCCFlagBitsLogic)
    defineMicroRegOp('Sub', \
            'DestReg = merge(DestReg, psrc1 - op2, dataSize)', \
            flagCode = genCCFlagBitsSub)
    defineMicroRegOp('Xor', \
            'DestReg = merge(DestReg, psrc1 ^ op2, dataSize)', \
            flagCode = genCCFlagBitsLogic)
    defineMicroRegOp('Mul1s', '''
            int signPos = (dataSize * 8) / 2 - 1;
            IntReg srcVal1 = psrc1 | (-bits(psrc1, signPos) << signPos);
            IntReg srcVal2 = op2 | (-bits(psrc1, signPos) << signPos);
            DestReg = merge(DestReg, srcVal1 * srcVal2, dataSize)
            ''')
    defineMicroRegOp('Mul1u', '''
            int halfSize = (dataSize * 8) / 2;
            IntReg srcVal1 = psrc1 & mask(halfSize);
            IntReg srcVal2 = op2 & mask(halfSize);
            DestReg = merge(DestReg, srcVal1 * srcVal2, dataSize)
            ''')
    defineMicroRegOp('Mulel', \
            'DestReg = merge(DestReg, psrc1 * op2, dataSize)')
    defineMicroRegOp('Muleh', '''
            int halfSize = (dataSize * 8) / 2;
            uint64_t psrc1_h = psrc1 >> halfSize;
            uint64_t psrc1_l = psrc1 & mask(halfSize);
            uint64_t psrc2_h = op2 >> halfSize;
            uint64_t psrc2_l = op2 & mask(halfSize);
            uint64_t result =
                ((psrc1_l * psrc2_h) >> halfSize) +
                ((psrc1_h * psrc2_l) >> halfSize) +
                psrc1_h * psrc2_h;
            DestReg = merge(DestReg, result, dataSize);
            ''')
    defineMicroRegOp('Div1', '''
            int halfSize = (dataSize * 8) / 2;
            IntReg quotient = (psrc1 / op2) & mask(halfSize);
            IntReg remainder = (psrc1 % op2) & mask(halfSize);
            IntReg result = quotient | (remainder << halfSize);
            DestReg = merge(DestReg, result, dataSize);
            ''')
    defineMicroRegOp('Divq', '''
            DestReg = merge(DestReg, psrc1 / op2, dataSize);
            ''')
    defineMicroRegOp('Divr', '''
            DestReg = merge(DestReg, psrc1 % op2, dataSize);
            ''')

    #
    # HACK HACK HACK HACK - Put psrc1 in here but make it inert to shut up gcc.
    #
    defineMicroRegOp('Mov', 'DestReg = merge(SrcReg1, psrc1 * 0 + op2, dataSize)',
            elseCode='DestReg=DestReg;', cc=True)

    # Shift instructions
    defineMicroRegOp('Sll', '''
            uint8_t shiftAmt = (op2 & ((dataSize == 8) ? mask(6) : mask(5)));
            DestReg = merge(DestReg, psrc1 << shiftAmt, dataSize);
            ''')
    defineMicroRegOp('Srl', '''
            uint8_t shiftAmt = (op2 & ((dataSize == 8) ? mask(6) : mask(5)));
            // Because what happens to the bits shift -in- on a right shift
            // is not defined in the C/C++ standard, we have to mask them out
            // to be sure they're zero.
            uint64_t logicalMask = mask(dataSize * 8 - shiftAmt);
            DestReg = merge(DestReg, (psrc1 >> shiftAmt) & logicalMask, dataSize);
            ''')
    defineMicroRegOp('Sra', '''
            uint8_t shiftAmt = (op2 & ((dataSize == 8) ? mask(6) : mask(5)));
            // Because what happens to the bits shift -in- on a right shift
            // is not defined in the C/C++ standard, we have to sign extend
            // them manually to be sure.
            uint64_t arithMask =
                -bits(op2, dataSize * 8 - 1) << (dataSize * 8 - shiftAmt);
            DestReg = merge(DestReg, (psrc1 >> shiftAmt) | arithMask, dataSize);
            ''')
    defineMicroRegOp('Ror', '''
            uint8_t shiftAmt =
                (op2 & ((dataSize == 8) ? mask(6) : mask(5)));
            if(shiftAmt)
            {
                uint64_t top = psrc1 << (dataSize * 8 - shiftAmt);
                uint64_t bottom = bits(psrc1, dataSize * 8, shiftAmt);
                DestReg = merge(DestReg, top | bottom, dataSize);
            }
            else
                DestReg = DestReg;
            ''')
    defineMicroRegOp('Rcr', '''
            uint8_t shiftAmt =
                (op2 & ((dataSize == 8) ? mask(6) : mask(5)));
            if(shiftAmt)
            {
                CCFlagBits flags = ccFlagBits;
                uint64_t top = flags.CF << (dataSize * 8 - shiftAmt);
                if(shiftAmt > 1)
                    top |= psrc1 << (dataSize * 8 - shiftAmt - 1);
                uint64_t bottom = bits(psrc1, dataSize * 8, shiftAmt);
                DestReg = merge(DestReg, top | bottom, dataSize);
            }
            else
                DestReg = DestReg;
            ''')
    defineMicroRegOp('Rol', '''
            uint8_t shiftAmt =
                (op2 & ((dataSize == 8) ? mask(6) : mask(5)));
            if(shiftAmt)
            {
                uint64_t top = psrc1 << shiftAmt;
                uint64_t bottom =
                    bits(psrc1, dataSize * 8 - 1, dataSize * 8 - shiftAmt);
                DestReg = merge(DestReg, top | bottom, dataSize);
            }
            else
                DestReg = DestReg;
            ''')
    defineMicroRegOp('Rcl', '''
            uint8_t shiftAmt =
                (op2 & ((dataSize == 8) ? mask(6) : mask(5)));
            if(shiftAmt)
            {
                CCFlagBits flags = ccFlagBits;
                uint64_t top = psrc1 << shiftAmt;
                uint64_t bottom = flags.CF << (shiftAmt - 1);
                if(shiftAmt > 1)
                    bottom |=
                        bits(psrc1, dataSize * 8 - 1,
                                   dataSize * 8 - shiftAmt + 1);
                DestReg = merge(DestReg, top | bottom, dataSize);
            }
            else
                DestReg = DestReg;
            ''')

    defineMicroRegOpWr('Wrip', 'RIP = psrc1 + op2', elseCode="RIP = RIP;")
    defineMicroRegOpWr('Br', 'nuIP = psrc1 + op2;', elseCode='nuIP = nuIP;')
    defineMicroRegOpWr('Wruflags', 'ccFlagBits = psrc1 ^ op2')

    defineMicroRegOpRd('Rdip', 'DestReg = RIP')
    defineMicroRegOpRd('Ruflags', 'DestReg = ccFlagBits')
    defineMicroRegOpRdImm('Ruflag', '''
            int flag = bits(ccFlagBits, (1 << imm8) + 0*psrc1);
            DestReg = merge(DestReg, flag, dataSize);
            ccFlagBits = ccFlagBits & ~EZFBit;
            ccFlagBits = ccFlagBits | ((flag == 0) ? EZFBit : 0);
            ''')

    defineMicroRegOpImm('Sext', '''
            IntReg val = psrc1;
            int sign_bit = bits(val, imm8-1, imm8-1);
            val = sign_bit ? (val | ~mask(imm8)) : val;
            DestReg = merge(DestReg, val, dataSize);''')

    defineMicroRegOpImm('Zext', 'DestReg = bits(psrc1, imm8-1, 0);')
}};
