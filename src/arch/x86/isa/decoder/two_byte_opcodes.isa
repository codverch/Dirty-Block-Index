// Copyright (c) 2007 The Hewlett-Packard Development Company
// All rights reserved.
//
// Redistribution and use of this software in source and binary forms,
// with or without modification, are permitted provided that the
// following conditions are met:
//
// The software must be used only for Non-Commercial Use which means any
// use which is NOT directed to receiving any direct monetary
// compensation for, or commercial advantage from such use.  Illustrative
// examples of non-commercial use are academic research, personal study,
// teaching, education and corporate research & development.
// Illustrative examples of commercial use are distributing products for
// commercial advantage and providing services using the software for
// commercial advantage.
//
// If you wish to use this software or functionality therein that may be
// covered by patents for commercial use, please contact:
//     Director of Intellectual Property Licensing
//     Office of Strategy and Technology
//     Hewlett-Packard Company
//     1501 Page Mill Road
//     Palo Alto, California  94304
//
// Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.  Redistributions
// in binary form must reproduce the above copyright notice, this list of
// conditions and the following disclaimer in the documentation and/or
// other materials provided with the distribution.  Neither the name of
// the COPYRIGHT HOLDER(s), HEWLETT-PACKARD COMPANY, nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.  No right of
// sublicense is granted herewith.  Derivatives of the software and
// output created using the software may be prepared, but only for
// Non-Commercial Uses.  Derivatives of the software may be shared with
// others provided: (i) the others agree to abide by the list of
// conditions herein which includes the Non-Commercial Use restrictions;
// and (ii) such Derivatives of the software include the above copyright
// notice to acknowledge the contribution from this software where
// applicable, this list of conditions and the disclaimer below.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Gabe Black

////////////////////////////////////////////////////////////////////
//
// Decode the two byte opcodes
//
0x2: decode OPCODE_PREFIXA {
    0x0F: decode OPCODE_OP_TOP5 {
        format WarnUnimpl {
            0x00: decode OPCODE_OP_BOTTOM3 {
                0x00: group6();
                0x01: group7();
                0x02: lar_Gv_Ew();
                0x03: lsl_Gv_Ew();
                //sandpile.org doesn't seem to know what this is... ?
                0x04: loadall_or_reset_or_hang();
                0x05: syscall();
                0x06: clts();
                //sandpile.org says (AMD) after sysret, so I might want to check
                //if that means amd64 or AMD machines
                0x07: loadall_or_sysret();
            }
            0x01: decode OPCODE_OP_BOTTOM3 {
                0x0: holderholder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x02: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x03: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x04: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x05: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x06: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x07: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x08: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x09: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0A: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0B: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0C: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0D: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0E: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0F: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x10: decode OPCODE_OP_BOTTOM3 {
                0x0: jo_Jz();
                0x1: jno_Jz();
                0x2: jb_Jz();
                0x3: jnb_Jz();
                0x4: jz_Jz();
                0x5: Inst::JNZ(Jz);
                0x6: jbe_Jz();
                0x7: jnbe_Jz();
            }
            0x11: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x12: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x13: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x14: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x15: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x16: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x17: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x18: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x19: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1A: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1B: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1C: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1D: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1E: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1F: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            default: FailUnimpl::twoByteOps();
        }
    }
    default: M5InternalError::error(
        {{"Unexpected first opcode byte in two byte opcode!"}});
}
