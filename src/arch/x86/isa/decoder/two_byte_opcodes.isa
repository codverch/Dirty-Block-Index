// Copyright (c) 2007 The Hewlett-Packard Development Company
// All rights reserved.
//
// Redistribution and use of this software in source and binary forms,
// with or without modification, are permitted provided that the
// following conditions are met:
//
// The software must be used only for Non-Commercial Use which means any
// use which is NOT directed to receiving any direct monetary
// compensation for, or commercial advantage from such use.  Illustrative
// examples of non-commercial use are academic research, personal study,
// teaching, education and corporate research & development.
// Illustrative examples of commercial use are distributing products for
// commercial advantage and providing services using the software for
// commercial advantage.
//
// If you wish to use this software or functionality therein that may be
// covered by patents for commercial use, please contact:
//     Director of Intellectual Property Licensing
//     Office of Strategy and Technology
//     Hewlett-Packard Company
//     1501 Page Mill Road
//     Palo Alto, California  94304
//
// Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.  Redistributions
// in binary form must reproduce the above copyright notice, this list of
// conditions and the following disclaimer in the documentation and/or
// other materials provided with the distribution.  Neither the name of
// the COPYRIGHT HOLDER(s), HEWLETT-PACKARD COMPANY, nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.  No right of
// sublicense is granted herewith.  Derivatives of the software and
// output created using the software may be prepared, but only for
// Non-Commercial Uses.  Derivatives of the software may be shared with
// others provided: (i) the others agree to abide by the list of
// conditions herein which includes the Non-Commercial Use restrictions;
// and (ii) such Derivatives of the software include the above copyright
// notice to acknowledge the contribution from this software where
// applicable, this list of conditions and the disclaimer below.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Gabe Black

////////////////////////////////////////////////////////////////////
//
// Decode the two byte opcodes
//
0x2: decode OPCODE_PREFIXA {
    0x0F: decode OPCODE_OP_TOP5 {
        format WarnUnimpl {
            0x00: decode OPCODE_OP_BOTTOM3 {
                0x00: group6();
                0x01: group7();
                0x02: lar_Gv_Ew();
                0x03: lsl_Gv_Ew();
                //sandpile.org doesn't seem to know what this is... ?
                0x04: loadall_or_reset_or_hang();
#if FULL_SYSTEM
                0x05: syscall();
#else
                0x05: SyscallInst::syscall('xc->syscall(rax)');
#endif
                0x06: clts();
                //sandpile.org says (AMD) after sysret, so I might want to check
                //if that means amd64 or AMD machines
                0x07: loadall_or_sysret();
            }
            0x01: decode OPCODE_OP_BOTTOM3 {
                0x0: invd();
                0x1: wbinvd();
                0x2: This_should_be_an_illegal_instruction();
                0x3: UD1();
                0x4: This_should_be_an_illegal_instruction();
                0x5: threednow();
                0x6: threednow();
                0x7: threednow();
            }
            0x02: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x03: decode OPCODE_OP_BOTTOM3 {
                0x0: group17();
                0x1: group17();
                0x2: group17();
                0x3: group17();
                0x4: group17();
                0x5: group17();
                0x6: group17();
                0x7: group17();
            }
            0x04: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x05: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x06: decode OPCODE_OP_BOTTOM3 {
                0x0: wrmsr();
                0x1: rdtsc();
                0x2: rdmsr();
                0x3: rdpmc();
                0x4: sysenter();
                0x5: sysexit();
                0x6: This_should_be_an_illegal_instruction();
                0x7: getsec();
            }
            0x07: decode OPCODE_OP_BOTTOM3 {
                0x0: three_byte_opcode();
                0x1: three_byte_opcode();
                0x2: three_byte_opcode();
                0x3: three_byte_opcode();
                0x4: three_byte_opcode();
                0x5: three_byte_opcode();
                0x6: three_byte_opcode();
                0x7: three_byte_opcode();
            }
            0x08: decode OPCODE_OP_BOTTOM3 {
                0x0: cmovo_Gv_Ev();
                0x1: cmovno_Gv_Ev();
                0x2: cmovb_Gv_Ev();
                0x3: cmovnb_Gv_Ev();
                0x4: cmovz_Gv_Ev();
                0x5: cmovnz_Gv_Ev();
                0x6: cmovbe_Gv_Ev();
                0x7: cmovnbe_Gv_Ev();
            }
            0x09: decode OPCODE_OP_BOTTOM3 {
                0x0: cmovs_Gv_Ev();
                0x1: cmovns_Gv_Ev();
                0x2: cmovp_Gv_Ev();
                0x3: cmovnp_Gv_Ev();
                0x4: cmovl_Gv_Ev();
                0x5: cmovnl_Gv_Ev();
                0x6: cmovle_Gv_Ev();
                0x7: cmovnle_Gv_Ev();
            }
            0x0A: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0B: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0C: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0D: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0E: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x0F: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            format Inst {
                0x10: decode OPCODE_OP_BOTTOM3 {
                    0x0: JO(Jz);
                    0x1: JNO(Jz);
                    0x2: JB(Jz);
                    0x3: JNB(Jz);
                    0x4: JZ(Jz);
                    0x5: JNZ(Jz);
                    0x6: JBE(Jz);
                    0x7: JNBE(Jz);
                }
                0x11: decode OPCODE_OP_BOTTOM3 {
                    0x0: JS(Jz);
                    0x1: JNS(Jz);
                    0x2: JP(Jz);
                    0x3: JNP(Jz);
                    0x4: JL(Jz);
                    0x5: JNL(Jz);
                    0x6: JLE(Jz);
                    0x7: JNLE(Jz);
                }
            }
            0x12: decode OPCODE_OP_BOTTOM3 {
                0x0: seto_Eb();
                0x1: setno_Eb();
                0x2: setb_Eb();
                0x3: setnb_Eb();
                0x4: setz_Eb();
                0x5: setnz_Eb();
                0x6: setbe_Eb();
                0x7: setnbe_Eb();
            }
            0x13: decode OPCODE_OP_BOTTOM3 {
                0x0: sets_Eb();
                0x1: setns_Eb();
                0x2: setp_Eb();
                0x3: setnp_Eb();
                0x4: setl_Eb();
                0x5: setnl_Eb();
                0x6: setle_Eb();
                0x7: setnle_Eb();
            }
            0x14: decode OPCODE_OP_BOTTOM3 {
                0x0: push_fs();
                0x1: pop_fs();
                0x2: cpuid();
                0x3: bt_Ev_Gv();
                0x4: shld_Ev_Gv_Ib();
                0x5: shld_Ev_Gv_rCl();
                0x6: xbts_and_cmpxchg();
                0x7: ibts_and_cmpxchg();
            }
            0x15: decode OPCODE_OP_BOTTOM3 {
                0x0: push_gs();
                0x1: pop_gs();
                0x2: rsm_smm();
                0x3: bts_Ev_Gv();
                0x4: shrd_Ev_Gv_Ib();
                0x5: shrd_Ev_Gv_rCl();
                0x6: group16();
                0x7: Inst::IMUL(Gv,Ev);
            }
            0x16: decode OPCODE_OP_BOTTOM3 {
                0x0: cmpxchg_Eb_Gb();
                0x1: cmpxchg_Ev_Gv();
                0x2: lss_Gz_Mp();
                0x3: btr_Ev_Gv();
                0x4: lfs_Gz_Mp();
                0x5: lgs_Gz_Mp();
                0x6: Inst::MOVZX_B(Gv,Eb);
                0x7: Inst::MOVZX_W(Gv,Ew);
            }
            0x17: decode OPCODE_OP_BOTTOM3 {
                0x0: jmpe_Jz(); // IA-64?
                0x1: group11_UD2();
                0x2: group8_Ev_Ib();
                0x3: btc_Ev_Gv();
                0x4: bsf_Gv_Ev();
                0x5: bsr_Gv_Ev();
                0x6: Inst::MOVSX_B(Gv,Eb);
                0x7: Inst::MOVSX_W(Gv,Ew);
            }
            0x18: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x19: bswap_B();
            0x1A: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1B: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1C: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1D: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1E: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            0x1F: decode OPCODE_OP_BOTTOM3 {
                0x0: holder();
                0x1: holder();
                0x2: holder();
                0x3: holder();
                0x4: holder();
                0x5: holder();
                0x6: holder();
                0x7: holder();
            }
            default: FailUnimpl::twoByteOps();
        }
    }
    default: M5InternalError::error(
        {{"Unexpected first opcode byte in two byte opcode!"}});
}
