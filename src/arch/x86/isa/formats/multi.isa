// -*- mode:c++ -*-

// Copyright (c) 2007 The Hewlett-Packard Development Company
// All rights reserved.
//
// Redistribution and use of this software in source and binary forms,
// with or without modification, are permitted provided that the
// following conditions are met:
//
// The software must be used only for Non-Commercial Use which means any
// use which is NOT directed to receiving any direct monetary
// compensation for, or commercial advantage from such use.  Illustrative
// examples of non-commercial use are academic research, personal study,
// teaching, education and corporate research & development.
// Illustrative examples of commercial use are distributing products for
// commercial advantage and providing services using the software for
// commercial advantage.
//
// If you wish to use this software or functionality therein that may be
// covered by patents for commercial use, please contact:
//     Director of Intellectual Property Licensing
//     Office of Strategy and Technology
//     Hewlett-Packard Company
//     1501 Page Mill Road
//     Palo Alto, California  94304
//
// Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.  Redistributions
// in binary form must reproduce the above copyright notice, this list of
// conditions and the following disclaimer in the documentation and/or
// other materials provided with the distribution.  Neither the name of
// the COPYRIGHT HOLDER(s), HEWLETT-PACKARD COMPANY, nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.  No right of
// sublicense is granted herewith.  Derivatives of the software and
// output created using the software may be prepared, but only for
// Non-Commercial Uses.  Derivatives of the software may be shared with
// others provided: (i) the others agree to abide by the list of
// conditions herein which includes the Non-Commercial Use restrictions;
// and (ii) such Derivatives of the software include the above copyright
// notice to acknowledge the contribution from this software where
// applicable, this list of conditions and the disclaimer below.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Gabe Black

////////////////////////////////////////////////////////////////////
//
// Instructions that do the same thing to multiple sets of arguments.
//

output header {{
}};

output decoder {{
}};

output exec {{
}};

let {{
    multiops = {}
}};

def format MultiOp(code, switchVal, opTags, *opt_flags) {{
    # These are C++ statements to create each type of static int. Since we
    # don't know what will be microcoded and what won't, we can't assume a
    # particular set of arguments for the constructor.
    instNew = []
    orig_code = code
    opRe = re.compile(r"%(?P<operandNum>[0-9]*)")
    # Get all the labels out of the code and make a dict for them. We'll do
    # this once since the position of labels shouldn't need to change at all.
    ops = assembleMicro(code)
    labels = buildLabelDict(ops)
    for tagSet in opTags:
        # A list of strings which either have the register number to use, or
        # a piece of code for calculating it.
        regNums = []
        code = orig_code
        # Build up a name for this instructions class using the argument
        # types. Each variation will get its own name this way.
        postfix = ''
        for tag in tagSet:
            postfix += '_' + tag

        # Figure out what register indexes to use for each operand. This
        # is where loads/stores could be set up. I need to distinguish
        # between inputs and outputs.
        # For right now, the indexes are just an increasing sequence
        counter = 0
        for tag in tagSet:
            regNums.append("%d" % counter)
            counter += 1

        # Replace the placeholders %0, %1, etc., with the right register
        # indexes.
        opMatch = opRe.search(code)
        while opMatch:
            opNum = opMatch.group("operandNum")
            opNum = int(opNum)
            if opNum > len(regNums):
                print "No operand type specified for operand %d!" % opNum
                print "I should bail out here too!"
            regNum = regNums[opNum]
            code = opRe.sub(regNum, code, 1)
            opMatch = opRe.search(code)

        # All the loads which feed this instruction
        loads = []
        # All the ops that make up the instruction proper.
        ops = assembleMicro(code)
        # Get all the labels out and make a dict for them
        # All the stores for this instruction's results
        stores = []

        # Various counts
        numLoads = len(loads)
        numOps = len(ops)
        numStores = len(stores)
        totalOps = numLoads + numOps + numStores
        print "There are %d total ops" % totalOps

        # If we can implement this instruction with exactly one microop, just
        # use that directly.
        newStmnt = ''
        if totalOps == 1:
            newStmnt = ops[0].getAllocator(labels)
        else:
            # Build up a macro op. We'll punt on this for now
            pass

        instNew.append(newStmnt)

    decodeBlob = 'switch(%s) {\n' % switchVal
    counter = 0
    for newStmnt in instNew:
        decodeBlob += 'case %d: return (X86StaticInst *)(%s);\n' % \
                      (counter, newStmnt)
        counter += 1
    decodeBlob += '}\n'
    decode_block = decodeBlob
}};
