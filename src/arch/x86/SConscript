# -*- mode:python -*-

# Copyright (c) 2005-2006 The Regents of The University of Michigan
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Gabe Black

# Copyright (c) 2007 The Hewlett-Packard Development Company
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms,
# with or without modification, are permitted provided that the
# following conditions are met:
#
# The software must be used only for Non-Commercial Use which means any
# use which is NOT directed to receiving any direct monetary
# compensation for, or commercial advantage from such use.  Illustrative
# examples of non-commercial use are academic research, personal study,
# teaching, education and corporate research & development.
# Illustrative examples of commercial use are distributing products for
# commercial advantage and providing services using the software for
# commercial advantage.
#
# If you wish to use this software or functionality therein that may be
# covered by patents for commercial use, please contact:
#     Director of Intellectual Property Licensing
#     Office of Strategy and Technology
#     Hewlett-Packard Company
#     1501 Page Mill Road
#     Palo Alto, California  94304
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.  Redistributions
# in binary form must reproduce the above copyright notice, this list of
# conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.  Neither the name of
# the COPYRIGHT HOLDER(s), HEWLETT-PACKARD COMPANY, nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.  No right of
# sublicense is granted herewith.  Derivatives of the software and
# output created using the software may be prepared, but only for
# Non-Commercial Uses.  Derivatives of the software may be shared with
# others provided: (i) the others agree to abide by the list of
# conditions herein which includes the Non-Commercial Use restrictions;
# and (ii) such Derivatives of the software include the above copyright
# notice to acknowledge the contribution from this software where
# applicable, this list of conditions and the disclaimer below.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Gabe Black

Import('*')

if env['TARGET_ISA'] == 'x86':
    Source('emulenv.cc')
    Source('floatregfile.cc')
    Source('insts/microldstop.cc')
    Source('insts/microregop.cc')
    Source('insts/static_inst.cc')
    Source('intregfile.cc')
    Source('miscregfile.cc')
    Source('predecoder.cc')
    Source('predecoder_tables.cc')
    Source('regfile.cc')
    Source('remote_gdb.cc')
    Source('tlb.cc')

    SimObject('X86TLB.py')

    if env['FULL_SYSTEM']:
        # Full-system sources
        pass
    else:
        Source('process.cc')

        Source('linux/linux.cc')
        Source('linux/process.cc')
        Source('linux/syscalls.cc')

    python_files = (
            '__init__.py',
            'arithmetic/__init__.py',
            'arithmetic/add_and_subtract.py',
            'arithmetic/increment_and_decrement.py',
            'arithmetic/multiply_and_divide.py',
            'cache_and_memory_management.py',
            'compare_and_test/__init__.py',
            'compare_and_test/bit_scan.py',
            'compare_and_test/bit_test.py',
            'compare_and_test/bounds.py',
            'compare_and_test/compare.py',
            'compare_and_test/set_byte_on_condition.py',
            'compare_and_test/test.py',
            'control_transfer/__init__.py',
            'control_transfer/call.py',
            'control_transfer/conditional_jump.py',
            'control_transfer/interrupts_and_exceptions.py',
            'control_transfer/jump.py',
            'control_transfer/loop.py',
            'control_transfer/xreturn.py',
            'data_conversion/__init__.py',
            'data_conversion/ascii_adjust.py',
            'data_conversion/bcd_adjust.py',
            'data_conversion/endian_conversion.py',
            'data_conversion/extract_sign_mask.py',
            'data_conversion/sign_extension.py',
            'data_conversion/translate.py',
            'data_transfer/__init__.py',
            'data_transfer/conditional_move.py',
            'data_transfer/move.py',
            'data_transfer/stack_operations.py',
            'data_transfer/xchg.py',
            'flags/__init__.py',
            'flags/load_and_store.py',
            'flags/push_and_pop.py',
            'flags/set_and_clear.py',
            'input_output/__init__.py',
            'input_output/general_io.py',
            'input_output/string_io.py',
            'load_effective_address.py',
            'load_segment_registers.py',
            'logical.py',
            'no_operation.py',
            'processor_information.py',
            'rotate_and_shift/__init__.py',
            'rotate_and_shift/rotate.py',
            'rotate_and_shift/shift.py',
            'semaphores.py',
            'string/__init__.py',
            'string/compare_strings.py',
            'string/load_string.py',
            'string/move_string.py',
            'string/scan_string.py',
            'string/store_string.py',
            'system/__init__.py',
            'system/undefined_operation.py',
            'system_calls.py',
            'sse/__init__.py',
            'sse/move.py',
            'sse/convert.py',
            'sse/add_and_subtract.py',
            'sse/multiply_and_divide.py',
            'sse/logical.py',
            'sse/compare.py',
            'sse/square_root.py'
            )

    # Add in files generated by the ISA description.
    isa_desc_files = env.ISADesc('isa/main.isa')
    for f in isa_desc_files:
        # Add in python file dependencies that won't be caught otherwise
        for pyfile in python_files:
            env.Depends(f, "isa/insts/%s" % pyfile)
        # Only non-header files need to be compiled.
        if not f.path.endswith('.hh'):
            Source(f)
