
/*
 * Copyright (c) 1999-2005 Mark D. Hill and David A. Wood
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * $Id: MSI_MOSI_CMP_directory-msg.sm 1.5 05/01/19 15:48:37-06:00 mikem@royal16.cs.wisc.edu $
 *
 */

// CoherenceRequestType
enumeration(CoherenceRequestType, desc="...") {
  GETX,      desc="Get eXclusive";
  GETX_ESCAPE,  desc="Get eXclusive, while in escape action";
  UPGRADE,   desc="UPGRADE to exclusive";
  GETS,      desc="Get Shared";
  GETS_ESCAPE,  desc="Get Shared, while in escape action";
  GET_INSTR, desc="Get Instruction";
  GET_INSTR_ESCAPE, desc="Get Instruction, while in escape action";
  INV,       desc="INValidate, could be NACKed";
  INV_ESCAPE, desc="INValidate, cannot be NACKed";
  PUTX,      desc="replacement message, for writeback to lower caches";
  PUTS,      desc="clean replacement message, for writeback to lower caches";
  REPLACE,   desc="replacement message, from lowest cache";
  CHECK_WRITE_FILTER,  desc="check write filter message";
  CHECK_READ_WRITE_FILTER, desc="check both read and write filters message";
}

// CoherenceResponseType
enumeration(CoherenceResponseType, desc="...") {
  MEMORY_ACK,  desc="Ack from memory controller";
  DATA,      desc="Data";
  DATA_EXCLUSIVE,      desc="Data";
  L2_DATA,    desc="data from L2, in shared mode";
  L2_DATA_EXCLUSIVE,  desc="data from L2, in exclusive mode";
  MEMORY_DATA,    desc="Data";
  ACK,            desc="Generic invalidate ack";
  NACK,           desc="NACK used to maintain transactional isolation";
  WB_ACK,            desc="writeback ack";
  UNBLOCK,         desc="unblock";
  EXCLUSIVE_UNBLOCK,         desc="exclusive unblock";
  UNBLOCK_CANCEL,    desc="unblock when trans. request fails";
}

// RequestMsg
structure(RequestMsg, desc="...", interface="NetworkMessage") {
  Address Address,              desc="Line address for this request";
  Address PhysicalAddress,      desc="Physical address for this request";
  CoherenceRequestType Type,    desc="Type of request (GetS, GetX, PutX, etc)";
  AccessModeType AccessMode,    desc="user/supervisor access type";
  MachineID Requestor      ,    desc="What component request";
  NetDest Destination,          desc="What components receive the request, includes MachineType and num";
  MessageSizeType MessageSize,  desc="size category of the message";
  DataBlock DataBlk,            desc="Data for the cache line (if PUTX)";
  bool Dirty, default="false",  desc="Dirty bit";
  PrefetchBit Prefetch,         desc="Is this a prefetch request";
  uint64 Timestamp,            desc="TLR-like Timestamp";
}

// ResponseMsg
structure(ResponseMsg, desc="...", interface="NetworkMessage") {
  Address Address,              desc="Line address for this request";
  Address PhysicalAddress,      desc="Physical address for this request";
  CoherenceResponseType Type,   desc="Type of response (Ack, Data, etc)";
  MachineID Sender,             desc="What component sent the data";
  NetDest Destination,          desc="Node to whom the data is sent";
  DataBlock DataBlk,            desc="Data for the cache line";
  bool Dirty, default="false",  desc="Dirty bit";
  int AckCount, default="0",    desc="number of acks in this message";
  MessageSizeType MessageSize,  desc="size category of the message";
  uint64 Timestamp,             desc="TLR-like Timestamp";
  NetDest Nackers,              desc="The nodes which sent NACKs to requestor";
  bool Transactional,           desc="Whether this address was transactional";
  bool RemoveLastOwnerFromDir,  desc="To solve some races with PUTX/GETS";
  MachineID LastOwnerID,        desc="What component sent the data";
}

// TriggerType
enumeration(TriggerType, desc="...") {
  ALL_ACKS,            desc="When all acks/nacks have been received";
}

// TriggerMsg
structure(TriggerMsg, desc="...", interface="Message") {
  Address Address,             desc="Line address for this request";
  Address PhysicalAddress,      desc="Physical address for this request";
  TriggerType Type,            desc="Type of trigger";
}

/*
  GETX,      desc="Get eXclusive";
  UPGRADE,   desc="UPGRADE to exclusive";
  GETS,      desc="Get Shared";
  GET_INSTR, desc="Get Instruction";
  INV,       desc="INValidate";
  PUTX,      desc="replacement message, for writeback to lower caches";
  REPLACE,   desc="replacement message, from lowest cache";
  CHECK_WRITE_FILTER,  desc="check write filter message";
  CHECK_READ_WRITE_FILTER, desc="check both read and write filters message";
*/

GenericRequestType convertToGenericType(CoherenceRequestType type) {
  if(type == CoherenceRequestType:PUTX) {
    return GenericRequestType:PUTX;
  } else if(type == CoherenceRequestType:GETS) {
    return GenericRequestType:GETS;
  } else if(type == CoherenceRequestType:GETS_ESCAPE) {
    return GenericRequestType:GETS;
  } else if(type == CoherenceRequestType:GET_INSTR) {
    return GenericRequestType:GET_INSTR;
  } else if(type == CoherenceRequestType:GET_INSTR_ESCAPE) {
    return GenericRequestType:GET_INSTR;
  } else if(type == CoherenceRequestType:GETX) {
    return GenericRequestType:GETX;
  } else if(type == CoherenceRequestType:GETX_ESCAPE) {
    return GenericRequestType:GETX;
  } else if(type == CoherenceRequestType:UPGRADE) {
    return GenericRequestType:UPGRADE;
  } else if(type == CoherenceRequestType:INV) {
    return GenericRequestType:INV;
  } else if( type == CoherenceRequestType:REPLACE) {
    return GenericRequestType:REPLACEMENT;
  } else {
    DEBUG_EXPR(type);
    error("invalid CoherenceRequestType");
  }
}


