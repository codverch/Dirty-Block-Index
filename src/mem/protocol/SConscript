# -*- mode:python -*-

# Copyright (c) 2009 The Hewlett-Packard Development Company
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Nathan Binkert

import os
import re
import string
import sys

from os.path import basename, dirname, exists, expanduser, isdir, isfile
from os.path import join as joinpath

import SCons

Import('*')

if not env['RUBY']:
    Return()

slicc_dir = Dir('../slicc')
protocol_dir = Dir('.')
html_dir = Dir('html')

#
# Use SLICC
#
def slicc_generator(target, source, env, for_signature):
    slicc_bin = str(source[0])
    protocol = source[1].get_contents()
    pdir = str(protocol_dir)
    hdir = str(html_dir)

    if not isdir(pdir):
        os.mkdir(pdir)
    if not isdir(hdir):
        os.mkdir(hdir)

    do_html = "html"
    cmdline = [ slicc_bin, pdir, hdir, protocol, do_html ]
    cmdline += [ str(s) for s in source[2:] ]
    cmdline = ' '.join(cmdline)
    return cmdline

slicc_builder = Builder(generator=slicc_generator)

protocol = env['PROTOCOL']
sources = [ protocol_dir.File("RubySlicc_interfaces.slicc"),
            protocol_dir.File("%s.slicc" % protocol) ]

execfile(slicc_dir.File('parser/parser.py').srcnode().abspath)

sm_files = read_slicc([s.srcnode().abspath for s in sources])
sm_files = [ protocol_dir.File(f) for f in sm_files ]

hh, cc = scan([s.srcnode().abspath for s in sm_files])
hh = [ protocol_dir.File(f) for f in hh ]
cc = [ protocol_dir.File(f) for f in cc ]

slicc_bin = slicc_dir.File("slicc")

env.Append(BUILDERS={'SLICC' : slicc_builder})
env.SLICC(hh + cc, [ slicc_bin, Value(protocol) ] + sm_files)

for f in cc:
    Source(f)
