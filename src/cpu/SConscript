# -*- mode:python -*-

# Copyright (c) 2006 The Regents of The University of Michigan
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Steve Reinhardt

import os
import os.path

# Import build environment variable from SConstruct.
Import('env')

#################################################################
#
# Generate StaticInst execute() method signatures.
#
# There must be one signature for each CPU model compiled in.
# Since the set of compiled-in models is flexible, we generate a
# header containing the appropriate set of signatures on the fly.
#
#################################################################

# CPU model-specific data is contained in cpu_models.py
# Convert to SCons File node to get path handling
models_db = File('cpu_models.py')
# slurp in contents of file
execfile(models_db.srcnode().abspath)

# Template for execute() signature.
exec_sig_template = '''
virtual Fault execute(%s *xc, Trace::InstRecord *traceData) const = 0;
virtual Fault initiateAcc(%s *xc, Trace::InstRecord *traceData) const
{ panic("initiateAcc not defined!"); };
virtual Fault completeAcc(Packet *pkt, %s *xc,
                          Trace::InstRecord *traceData) const
{ panic("completeAcc not defined!"); };
'''

mem_ini_sig_template = '''
virtual Fault initiateAcc(%s *xc, Trace::InstRecord *traceData) const { panic("Not defined!"); };
'''

mem_comp_sig_template = '''
virtual Fault completeAcc(uint8_t *data, %s *xc, Trace::InstRecord *traceData) const { panic("Not defined!"); return NoFault; };
'''

# Generate a temporary CPU list, including the CheckerCPU if
# it's enabled.  This isn't used for anything else other than StaticInst
# headers.
temp_cpu_list = env['CPU_MODELS']
if env['USE_CHECKER']:
    temp_cpu_list.append('CheckerCPU')

# Generate header.  
def gen_cpu_exec_signatures(target, source, env):
    f = open(str(target[0]), 'w')
    print >> f, '''
#ifndef __CPU_STATIC_INST_EXEC_SIGS_HH__
#define __CPU_STATIC_INST_EXEC_SIGS_HH__
'''
    for cpu in temp_cpu_list:
        xc_type = CpuModel.dict[cpu].strings['CPU_exec_context']
        print >> f, exec_sig_template % (xc_type, xc_type, xc_type)
    print >> f, '''
#endif  // __CPU_STATIC_INST_EXEC_SIGS_HH__
'''

# Generate string that gets printed when header is rebuilt
def gen_sigs_string(target, source, env):
    return "Generating static_inst_exec_sigs.hh: " \
           + ', '.join(temp_cpu_list)

# Add command to generate header to environment.
env.Command('static_inst_exec_sigs.hh', models_db,
            Action(gen_cpu_exec_signatures, gen_sigs_string,
                   varlist = temp_cpu_list))

env.Depends('static_inst_exec_sigs.hh', Value(env['USE_CHECKER']))
env.Depends('static_inst_exec_sigs.hh', Value(env['CPU_MODELS']))

# List of suppported CPUs by the Checker.  Errors out if USE_CHECKER=True
# and one of these are not being used.
CheckerSupportedCPUList = ['AlphaO3CPU', 'OzoneCPU']

#################################################################
#
# Include CPU-model-specific files based on set of models
# specified in CPU_MODELS build option.
#
#################################################################

sources = []

need_simple_base = False
if 'AtomicSimpleCPU' in env['CPU_MODELS']:
    need_simple_base = True
    sources += Split('simple/atomic.cc')

if 'TimingSimpleCPU' in env['CPU_MODELS']:
    need_simple_base = True
    sources += Split('simple/timing.cc')

if need_simple_base:
    sources += Split('simple/base.cc')

if 'FastCPU' in env['CPU_MODELS']:
    sources += Split('fast/cpu.cc')

if 'AlphaO3CPU' in env['CPU_MODELS']:
    sources += Split('''
        o3/2bit_local_pred.cc
        o3/alpha_dyn_inst.cc
        o3/alpha_cpu.cc
        o3/alpha_cpu_builder.cc
        o3/base_dyn_inst.cc
        o3/bpred_unit.cc
        o3/btb.cc
        o3/commit.cc
        o3/decode.cc
        o3/fetch.cc
        o3/free_list.cc
        o3/fu_pool.cc
        o3/cpu.cc
        o3/iew.cc
        o3/inst_queue.cc
        o3/lsq_unit.cc
        o3/lsq.cc
        o3/mem_dep_unit.cc
        o3/ras.cc
        o3/rename.cc
        o3/rename_map.cc
        o3/rob.cc
        o3/scoreboard.cc
        o3/store_set.cc
        o3/tournament_pred.cc
        ''')
    if env['USE_CHECKER']:
        sources += Split('o3/checker_builder.cc')

if 'OzoneCPU' in env['CPU_MODELS']:
    sources += Split('''
        ozone/base_dyn_inst.cc
        ozone/bpred_unit.cc
        ozone/cpu.cc
        ozone/cpu_builder.cc
        ozone/dyn_inst.cc
        ozone/front_end.cc
        ozone/lw_back_end.cc
        ozone/lw_lsq.cc
        ozone/rename_table.cc
        ''')
    if env['USE_CHECKER']:
        sources += Split('ozone/checker_builder.cc')

if env['USE_CHECKER']:
    sources += Split('checker/cpu.cc')
    checker_supports = False
    for i in CheckerSupportedCPUList:
        if i in env['CPU_MODELS']:
            checker_supports = True
    if not checker_supports:
        print "Checker only supports CPU models %s, please " \
              "set USE_CHECKER=False or use one of those CPU models" \
              % CheckerSupportedCPUList
        Exit(1)


# FullCPU sources are included from src/SConscript since they're not
# below this point in the file hierarchy.

# Convert file names to SCons File objects.  This takes care of the
# path relative to the top of the directory tree.
sources = [File(s) for s in sources]

Return('sources')

